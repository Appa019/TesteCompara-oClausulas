import streamlit as st
import pandas as pd
import PyPDF2
import re
import os
from openai import OpenAI
import json
from typing import List, Dict, Tuple
import time
from io import BytesIO

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Comparador de Contratos",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

class ContractComparator:
    def __init__(self, api_key: str):
        self.client = OpenAI(api_key=api_key)
        
    def extract_text_from_pdf(self, pdf_file) -> str:
        """Extrai texto de um arquivo PDF"""
        try:
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            text = ""
            for page in pdf_reader.pages:
                text += page.extract_text() + "\n"
            return text
        except Exception as e:
            st.error(f"Erro ao extrair texto do PDF: {e}")
            return ""
    
    def extract_clauses(self, text: str) -> Dict[str, str]:
        """Extrai cl√°usulas e subcl√°usulas do texto do contrato"""
        clauses = {}
        
        # Limpar texto para melhor processamento
        text = re.sub(r'\s+', ' ', text)
        
        # 1. Padr√£o para cl√°usulas principais: CL√ÅUSULA PRIMEIRA ‚Äì NOME DA CL√ÅUSULA
        main_clause_pattern = r'CL√ÅUSULA\s+(PRIMEIRA|SEGUNDA|TERCEIRA|QUARTA|QUINTA|SEXTA|S√âTIMA|OITAVA|NONA|D√âCIMA|ONZE|DOZE|TREZE|QUATORZE|QUINZE|DEZESSEIS|DEZESSETE|DEZOITO|DEZENOVE|VINTE|VINTE\s+E\s+UM|VINTE\s+E\s+DOIS|VINTE\s+E\s+TR√äS)\s*[‚Äì-]\s*([^¬ß]+?)(?=CL√ÅUSULA\s+(?:PRIMEIRA|SEGUNDA|TERCEIRA|QUARTA|QUINTA|SEXTA|S√âTIMA|OITAVA|NONA|D√âCIMA|ONZE|DOZE|TREZE|QUATORZE|QUINZE|DEZESSEIS|DEZESSETE|DEZOITO|DEZENOVE|VINTE|VINTE\s+E\s+UM|VINTE\s+E\s+DOIS|VINTE\s+E\s+TR√äS)|ANEXO|AP√äNDICE|$)'
        
        # 2. Padr√£o para anexos e ap√™ndices
        annex_pattern = r'(ANEXO\s+[I-V]+(?:-[A-Z])?|AP√äNDICE\s+[I-V]+)\s*[‚Äì-]\s*([^¬ß]+?)(?=(?:ANEXO|AP√äNDICE|CL√ÅUSULA)\s+|$)'
        
        # 3. Padr√£o para subcl√°usulas de todos os n√≠veis (1.1, 1.1.1, 1.1.1.1, etc.)
        subclause_pattern = r'(\d+\.\d+(?:\.\d+)*)\s*([A-Z][^¬ß]+?)(?=\d+\.\d+(?:\.\d+)*\s+[A-Z]|CL√ÅUSULA|ANEXO|AP√äNDICE|$)'
        
        # 4. Padr√£o para itens com letras (a), (b), (c), etc.
        letter_item_pattern = r'\(([a-z])\)\s*([^¬ß]+?)(?=\([a-z]\)|CL√ÅUSULA|ANEXO|AP√äNDICE|\d+\.\d+|$)'
        
        # 5. Padr√£o para itens com n√∫meros romanos (i), (ii), (iii), etc.
        roman_item_pattern = r'\(([ivx]+)\)\s*([^¬ß]+?)(?=\([ivx]+\)|CL√ÅUSULA|ANEXO|AP√äNDICE|\d+\.\d+|$)'
        
        # Extrair cl√°usulas principais
        main_matches = re.finditer(main_clause_pattern, text, re.DOTALL | re.IGNORECASE)
        for match in main_matches:
            clause_number = match.group(1).strip()
            clause_content = match.group(2).strip()
            
            # Extrair o t√≠tulo da cl√°usula (primeira linha geralmente)
            title_match = re.match(r'^([^\.]+?)(?:\s*\.\s*|\s*$)', clause_content)
            if title_match:
                clause_title = title_match.group(1).strip()
                clause_id = f"CL√ÅUSULA {clause_number} ‚Äì {clause_title}"
            else:
                clause_id = f"CL√ÅUSULA {clause_number}"
            
            # Limitar tamanho do conte√∫do
            if len(clause_content) > 4000:
                clause_content = clause_content[:4000] + "..."
            
            clauses[clause_id] = clause_content
        
        # Extrair anexos e ap√™ndices
        annex_matches = re.finditer(annex_pattern, text, re.DOTALL | re.IGNORECASE)
        for match in annex_matches:
            annex_id = match.group(1).strip()
            annex_content = match.group(2).strip()
            
            # Extrair t√≠tulo do anexo/ap√™ndice
            title_match = re.match(r'^([^\.]+?)(?:\s*\.\s*|\s*$)', annex_content)
            if title_match:
                annex_title = title_match.group(1).strip()
                full_annex_id = f"{annex_id} ‚Äì {annex_title}"
            else:
                full_annex_id = annex_id
            
            # Limitar tamanho do conte√∫do
            if len(annex_content) > 4000:
                annex_content = annex_content[:4000] + "..."
            
            clauses[full_annex_id] = annex_content
        
        # Extrair subcl√°usulas numeradas (TODOS os n√≠veis: 1.1, 1.1.1, 1.1.1.1, etc.)
        subclause_matches = re.finditer(subclause_pattern, text, re.DOTALL | re.IGNORECASE)
        for match in subclause_matches:
            subclause_id = match.group(1).strip()
            subclause_content = match.group(2).strip()
            
            # Verificar se √© uma subcl√°usula substancial (mais de 80 caracteres)
            if len(subclause_content) > 80:
                # Limitar tamanho do conte√∫do
                if len(subclause_content) > 3000:
                    subclause_content = subclause_content[:3000] + "..."
                
                clauses[f"Item {subclause_id}"] = subclause_content
        
        # Extrair itens com letras (a), (b), (c)
        letter_matches = re.finditer(letter_item_pattern, text, re.DOTALL | re.IGNORECASE)
        for match in letter_matches:
            letter_id = match.group(1).strip()
            letter_content = match.group(2).strip()
            
            # Verificar se √© um item substancial
            if len(letter_content) > 60:
                # Limitar tamanho do conte√∫do
                if len(letter_content) > 2000:
                    letter_content = letter_content[:2000] + "..."
                
                clauses[f"Item ({letter_id})"] = letter_content
        
        # Extrair itens com n√∫meros romanos (i), (ii), (iii)
        roman_matches = re.finditer(roman_item_pattern, text, re.DOTALL | re.IGNORECASE)
        for match in roman_matches:
            roman_id = match.group(1).strip()
            roman_content = match.group(2).strip()
            
            # Verificar se √© um item substancial
            if len(roman_content) > 60:
                # Limitar tamanho do conte√∫do
                if len(roman_content) > 2000:
                    roman_content = roman_content[:2000] + "..."
                
                clauses[f"Item ({roman_id})"] = roman_content
        
        # Extrair se√ß√µes espec√≠ficas importantes que podem n√£o seguir padr√µes anteriores
        # Padr√£o para se√ß√µes com t√≠tulos em mai√∫sculas
        section_pattern = r'([A-Z][A-Z\s]{10,})\s*([^¬ß]+?)(?=[A-Z][A-Z\s]{10,}|CL√ÅUSULA|ANEXO|AP√äNDICE|$)'
        section_matches = re.finditer(section_pattern, text, re.DOTALL)
        for match in section_matches:
            section_title = match.group(1).strip()
            section_content = match.group(2).strip()
            
            # Filtrar se√ß√µes substanciais e relevantes
            if (len(section_content) > 100 and 
                not section_title.startswith("CL√ÅUSULA") and
                not section_title.startswith("ANEXO") and
                not section_title.startswith("AP√äNDICE")):
                
                # Limitar tamanho do conte√∫do
                if len(section_content) > 3000:
                    section_content = section_content[:3000] + "..."
                
                clauses[f"Se√ß√£o: {section_title}"] = section_content
        
        return clauses
    
    def compare_clauses_with_ai(self, clause_id: str, clauses: Dict[str, str], contract_names: List[str]) -> Dict:
        """Compara cl√°usulas usando o modelo GPT-4.1 nano da OpenAI"""
        
        # Preparar o prompt com contexto espec√≠fico para contratos jur√≠dicos
        prompt = f"""
        Analise as seguintes vers√µes da se√ß√£o "{clause_id}" de tr√™s contratos jur√≠dicos diferentes e identifique APENAS diferen√ßas significativas que alterem o sentido legal ou impacto contratual:

        """
        
        for i, (name, content) in enumerate(zip(contract_names, clauses.values())):
            prompt += f"\n**{name}:**\n{content}\n"
        
        prompt += """
        
        CRIT√âRIOS para identificar diferen√ßas SIGNIFICATIVAS:
        1. Altera√ß√µes em obriga√ß√µes ou direitos das partes
        2. Mudan√ßas em valores monet√°rios, percentuais ou prazos
        3. Altera√ß√µes em penalidades, multas ou san√ß√µes
        4. Modifica√ß√µes em condi√ß√µes de rescis√£o ou t√©rmino
        5. Diferen√ßas em procedimentos ou requisitos legais
        6. Altera√ß√µes em defini√ß√µes que impactem outras cl√°usulas
        7. Mudan√ßas em jurisdi√ß√£o ou lei aplic√°vel
        8. Diferen√ßas em garantias ou responsabilidades
        
        IGNORE:
        - Diferen√ßas meramente estil√≠sticas ou de reda√ß√£o
        - Altera√ß√µes na ordem das palavras sem mudan√ßa de significado
        - Varia√ß√µes em formata√ß√£o ou pontua√ß√£o
        - Pequenas diferen√ßas gramaticais
        
        Se houver diferen√ßas SIGNIFICATIVAS, retorne:
        {
            "tem_diferenca": true,
            "diferenca_encontrada": "Descri√ß√£o precisa e concisa da diferen√ßa legal encontrada, focando no impacto pr√°tico"
        }
        
        Se N√ÉO houver diferen√ßas significativas, retorne:
        {
            "tem_diferenca": false,
            "diferenca_encontrada": ""
        }
        """
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4.1-nano",
                messages=[
                    {"role": "system", "content": "Voc√™ √© um advogado especialista em an√°lise comparativa de contratos. Foque apenas em diferen√ßas que tenham impacto legal real e pr√°tico."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=800,
                temperature=0.1
            )
            
            response_text = response.choices[0].message.content
            
            # Tentar extrair JSON da resposta
            try:
                json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
                if json_match:
                    result = json.loads(json_match.group())
                    return result
                else:
                    return {"tem_diferenca": False, "diferenca_encontrada": ""}
            except:
                return {"tem_diferenca": False, "diferenca_encontrada": ""}
                
        except Exception as e:
            st.error(f"Erro na API OpenAI: {e}")
            return {"tem_diferenca": False, "diferenca_encontrada": ""}
    
    def process_contracts(self, pdf_files: List, progress_bar, status_text) -> pd.DataFrame:
        """Processa os contratos e gera a tabela de diferen√ßas"""
        
        # Extrair texto dos PDFs
        status_text.text("Extraindo texto dos PDFs...")
        contracts_text = {}
        contracts_clauses = {}
        
        for i, pdf_file in enumerate(pdf_files):
            contract_name = pdf_file.name.replace('.pdf', '')
            text = self.extract_text_from_pdf(pdf_file)
            contracts_text[contract_name] = text
            
            # Extrair cl√°usulas
            clauses = self.extract_clauses(text)
            contracts_clauses[contract_name] = clauses
            
            progress_bar.progress((i + 1) / len(pdf_files) * 0.3)
        
        # Encontrar cl√°usulas comuns e organizar por import√¢ncia
        status_text.text("Identificando e organizando cl√°usulas...")
        all_clause_ids = set()
        for clauses in contracts_clauses.values():
            all_clause_ids.update(clauses.keys())
        
        # Priorizar cl√°usulas principais (ordenar por import√¢ncia)
        def clause_priority(clause_id):
            if clause_id.startswith("CL√ÅUSULA"):
                # Extrair n√∫mero da cl√°usula para ordena√ß√£o
                if "PRIMEIRA" in clause_id:
                    return 1
                elif "SEGUNDA" in clause_id:
                    return 2
                elif "TERCEIRA" in clause_id:
                    return 3
                elif "QUARTA" in clause_id:
                    return 4
                elif "QUINTA" in clause_id:
                    return 5
                elif "SEXTA" in clause_id:
                    return 6
                elif "S√âTIMA" in clause_id:
                    return 7
                elif "OITAVA" in clause_id:
                    return 8
                elif "NONA" in clause_id:
                    return 9
                elif "D√âCIMA" in clause_id:
                    return 10
                elif "ONZE" in clause_id:
                    return 11
                elif "DOZE" in clause_id:
                    return 12
                elif "TREZE" in clause_id:
                    return 13
                elif "QUATORZE" in clause_id:
                    return 14
                elif "QUINZE" in clause_id:
                    return 15
                elif "DEZESSEIS" in clause_id:
                    return 16
                elif "DEZESSETE" in clause_id:
                    return 17
                elif "DEZOITO" in clause_id:
                    return 18
                elif "DEZENOVE" in clause_id:
                    return 19
                elif "VINTE" in clause_id:
                    if "UM" in clause_id:
                        return 21
                    elif "DOIS" in clause_id:
                        return 22
                    elif "TR√äS" in clause_id:
                        return 23
                    else:
                        return 20
                else:
                    return 100
            elif clause_id.startswith("ANEXO"):
                return 200
            elif clause_id.startswith("AP√äNDICE"):
                return 300
            elif clause_id.startswith("Item") and "." in clause_id:
                # Ordenar subcl√°usulas numeradas (1.1, 1.1.1, etc.)
                numbers = clause_id.replace("Item ", "").split(".")
                try:
                    return 400 + int(numbers[0]) + int(numbers[1])/100 + (int(numbers[2])/10000 if len(numbers) > 2 else 0)
                except:
                    return 450
            elif clause_id.startswith("Item ("):
                # Itens com letras ou n√∫meros romanos
                return 500
            elif clause_id.startswith("Se√ß√£o:"):
                return 600
            else:
                return 700
        
        # Ordenar cl√°usulas por prioridade
        sorted_clause_ids = sorted(all_clause_ids, key=clause_priority)
        
        # Mostrar estat√≠sticas de extra√ß√£o
        st.info(f"üìä **Cl√°usulas extra√≠das:** {len(all_clause_ids)} se√ß√µes identificadas para an√°lise")
        
        # Mostrar preview das cl√°usulas encontradas
        with st.expander("üîç Preview das cl√°usulas encontradas"):
            for i, clause_id in enumerate(sorted_clause_ids[:10]):  # Mostrar primeiras 10
                st.write(f"**{i+1}.** {clause_id}")
            if len(sorted_clause_ids) > 10:
                st.write(f"... e mais {len(sorted_clause_ids) - 10} cl√°usulas")
        
        # Preparar dados para compara√ß√£o
        results = []
        contract_names = list(contracts_clauses.keys())
        
        total_clauses = len(sorted_clause_ids)
        processed_clauses = 0
        
        for clause_id in sorted_clause_ids:
            status_text.text(f"Comparando: {clause_id[:50]}...")
            
            # Coletar cl√°usulas dos 3 contratos
            clause_contents = {}
            for contract_name in contract_names:
                clause_contents[contract_name] = contracts_clauses[contract_name].get(clause_id, "")
            
            # Verificar se pelo menos 2 contratos t√™m esta cl√°usula
            non_empty_clauses = [content for content in clause_contents.values() if content.strip()]
            
            if len(non_empty_clauses) >= 2:
                # Comparar com IA
                comparison_result = self.compare_clauses_with_ai(clause_id, clause_contents, contract_names)
                
                if comparison_result.get("tem_diferenca", False):
                    # Criar linha na tabela
                    row = {
                        "Cl√°usula": clause_id,
                        "Diferen√ßa": comparison_result.get("diferenca_encontrada", "")
                    }
                    
                    # Adicionar conte√∫do de cada contrato (limitado para visualiza√ß√£o)
                    for contract_name in contract_names:
                        content = clause_contents[contract_name]
                        if len(content) > 800:
                            content = content[:800] + "..."
                        row[contract_name] = content
                    
                    results.append(row)
            
            processed_clauses += 1
            progress_bar.progress(0.3 + (processed_clauses / total_clauses) * 0.7)
            
            # Pequena pausa para evitar rate limiting
            time.sleep(0.2)
        
        status_text.text("‚úÖ An√°lise conclu√≠da!")
        return pd.DataFrame(results)

def main():
    st.title("üìÑ Comparador de Contratos")
    st.markdown("### Identifique diferen√ßas significativas entre cl√°usulas de contratos")
    
    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")
        
        # Campo para API Key
        api_key = st.text_input(
            "Chave da API OpenAI",
            type="password",
            help="Insira sua chave da API OpenAI para usar o modelo GPT-4.1 nano"
        )
        
        # Op√ß√£o para usar vari√°vel de ambiente
        use_env_key = st.checkbox("Usar chave da vari√°vel de ambiente OPENAI_API_KEY")
        
        if use_env_key:
            api_key = os.getenv("OPENAI_API_KEY")
    
    # Verificar se a API key est√° dispon√≠vel
    if not api_key:
        st.error("‚ö†Ô∏è Por favor, insira sua chave da API OpenAI ou configure a vari√°vel de ambiente.")
        st.stop()
    
    # Upload de arquivos
    st.header("üìÅ Upload dos Contratos")
    uploaded_files = st.file_uploader(
        "Selecione exatamente 3 arquivos PDF para comparar",
        type=['pdf'],
        accept_multiple_files=True,
        help="Carregue 3 contratos em formato PDF com texto selecion√°vel"
    )
    
    if uploaded_files:
        if len(uploaded_files) != 3:
            st.warning(f"‚ö†Ô∏è Voc√™ carregou {len(uploaded_files)} arquivo(s). S√£o necess√°rios exatamente 3 arquivos.")
        else:
            st.success(f"‚úÖ {len(uploaded_files)} contratos carregados com sucesso!")
            
            # Mostrar nomes dos arquivos
            for i, file in enumerate(uploaded_files, 1):
                st.write(f"**Contrato {i}:** {file.name}")
    
    # Bot√£o para iniciar compara√ß√£o
    if uploaded_files and len(uploaded_files) == 3:
        if st.button("üîç Comparar Contratos", type="primary"):
            
            # Inicializar o comparador
            comparator = ContractComparator(api_key)
            
            # Barras de progresso
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            try:
                # Processar contratos
                with st.spinner("Processando contratos..."):
                    df_results = comparator.process_contracts(uploaded_files, progress_bar, status_text)
                
                progress_bar.empty()
                status_text.empty()
                
                if not df_results.empty:
                    st.success(f"‚úÖ Compara√ß√£o conclu√≠da! Encontradas {len(df_results)} diferen√ßas significativas.")
                    
                    # Mostrar tabela
                    st.header("üìä Resultados da Compara√ß√£o")
                    st.dataframe(df_results, use_container_width=True)
                    
                    # Gerar arquivo Excel
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        df_results.to_excel(writer, sheet_name='Compara√ß√£o de Contratos', index=False)
                        
                        # Formata√ß√£o
                        workbook = writer.book
                        worksheet = writer.sheets['Compara√ß√£o de Contratos']
                        
                        # Formato para headers
                        header_format = workbook.add_format({
                            'bold': True,
                            'text_wrap': True,
                            'valign': 'top',
                            'fg_color': '#D7E4BC',
                            'border': 1
                        })
                        
                        # Aplicar formato aos headers
                        for col_num, value in enumerate(df_results.columns.values):
                            worksheet.write(0, col_num, value, header_format)
                        
                        # Ajustar largura das colunas
                        worksheet.set_column('A:A', 20)  # Cl√°usula
                        worksheet.set_column('B:B', 50)  # Diferen√ßa
                        worksheet.set_column('C:Z', 40)  # Contratos
                    
                    # Bot√£o de download
                    st.download_button(
                        label="üì• Baixar Resultados (Excel)",
                        data=output.getvalue(),
                        file_name="comparacao_contratos.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                    
                    # Estat√≠sticas
                    st.header("üìà Estat√≠sticas")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("Total de Diferen√ßas", len(df_results))
                    
                    with col2:
                        st.metric("Contratos Analisados", len(uploaded_files))
                    
                    with col3:
                        if len(df_results) > 0:
                            avg_diff_length = df_results['Diferen√ßa'].str.len().mean()
                            st.metric("M√©dia de Caracteres por Diferen√ßa", f"{avg_diff_length:.0f}")
                
                else:
                    st.info("‚ÑπÔ∏è Nenhuma diferen√ßa significativa foi encontrada entre os contratos.")
                    
            except Exception as e:
                st.error(f"‚ùå Erro durante o processamento: {e}")
                progress_bar.empty()
                status_text.empty()
    
    # Informa√ß√µes sobre o uso
    with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre o uso"):
        st.markdown("""
        **Como usar:**
        1. Insira sua chave da API OpenAI
        2. Carregue exatamente 3 arquivos PDF
        3. Clique em "Comparar Contratos"
        4. Aguarde o processamento (pode demorar alguns minutos)
        5. Baixe os resultados em Excel
        
        **O que √© analisado:**
        - Diferen√ßas em obriga√ß√µes das partes
        - Altera√ß√µes em valores, percentuais e datas
        - Mudan√ßas em prazos e condi√ß√µes
        - Varia√ß√µes em penalidades
        - Altera√ß√µes em direitos e responsabilidades
        
        **Modelo de IA:** OpenAI GPT-4.1 nano
        """)

if __name__ == "__main__":
    main()
